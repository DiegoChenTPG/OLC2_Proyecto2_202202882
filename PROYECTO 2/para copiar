
// sin considerar la declaracion sin asignacion int a;
visitDeclaracionVariable(node) {
    this.code.comment(`Declaracion Variable: ${node.id}`)

    node.exp.accept(this)

    if (this.insideFunction) {
        const localObject = this.code.getFrameLocal(this.frameDclIndex)
        const valueObj = this.code.popObject(r.T0)

        this.code.addi(r.T1, r.FP, -localObject.offset * 4)
        this.code.sw(r.T0, r.T1)

        // Inferir el tipo
        localObject.type = valueObj.type
        this.frameDclIndex++

        return
    }

    this.code.tagObject(node.id)

    this.code.comment(`Fin Declaracion Variable: ${node.id}`)
}


// aplicando la logica para int a; pero sin aplicar el if de isInsideFuction
visitDeclaracionVariable(node) {
    this.code.comment(`Declaracion Variable: ${node.id}`)


    if(!node.exp){
        this.code.push(r.HP)

        const palabraNull = "null"
        for (let i = 0; i < palabraNull.length; i++) {
            this.code.li(r.T0, nullString.charCodeAt(i))
            this.code.sb(r.T0, r.HP)
            this.code.addi(r.HP, r.HP, 1)                
        }

        this.code.sb(r.ZERO, r.HP)
        this.code.addi(r.HP, r.HP, 1)

        this.code.tagObject(node.id)

        switch (node.tipo) {
            case "int":
                this.code.pushObject({ type: 'string', length: 4, valor: 'null' });
                break
                
            case "string":
                this.code.pushObject({ type: 'string', length: 4, valor: 'null' });
            break

            case "float":
                this.code.pushObject({ type: 'string', length: 4, valor: 'null' });
            break

            case "char":
                this.code.pushObject({ type: 'string', length: 4, valor: 'null' });
            break

            default:
                this.code.pushObject({ type: 'string', length: 4, valor: 'null' });
                break
        }
    } else {
        node.exp.accept(this)
        this.code.tagObject(node.id)
    }
    

    if (this.insideFunction) {
        const localObject = this.code.getFrameLocal(this.frameDclIndex)
        const valueObj = this.code.popObject(r.T0)

        this.code.addi(r.T1, r.FP, -localObject.offset * 4)
        this.code.sw(r.T0, r.T1)

        // Inferir el tipo
        localObject.type = valueObj.type
        this.frameDclIndex++

        return
    }


    this.code.comment(`Fin Declaracion Variable: ${node.id}`)
}


