/**
* @type {BaseVisitor['visitIf']}
*/
visitIf(node) {
    this.code.comment("Inicio del If")

    this.code.comment("Condicion")
    node.condicion.accept(this)

    this.code.popObject(r.T0)

    this.code.comment("Fin de condicion")

    const hasElse = !!node.sentenciasFalse

    if (hasElse) {
        const elseLabel = this.code.getLabel()
        const endIfLabel = this.code.getLabel()

        this.code.beq(r.T0, r.ZERO, elseLabel)
        this.code.comment("Rama verdadera")
        node.sentenciasTrue.accept(this)
        this.code.j(endIfLabel)
        this.code.addLabel(elseLabel)
        this.code.comment("Rama falsa")
        node.sentenciasFalse.accept(this)
        this.code.addLabel(endIfLabel)
    } else {
        const endIfLabel = this.code.getLabel()

        this.code.beq(r.T0, r.ZERO, endIfLabel)
        this.code.comment("Rama verdadera")
        node.sentenciasTrue.accept(this)
        this.code.addLabel(endIfLabel)
    }

    this.code.comment("Fin del If")
}


/**
    * @type {BaseVisitor['visitBreak']}
    */
visitBreak(node) {
    this.code.j(this.breakLabel)
}

/**
    * @type {BaseVisitor['visitContinue']}
    */
visitContinue(node) {
    this.code.j(this.continueLabel)
}

/**
* @type {BaseVisitor['visitSwitch']}
*/

visitSwitch(node){
    this.code.comment("Inicio del Switch")

    // Evaluar la expresión del switch
    this.code.comment("Evaluación de expresión switch")
    node.inicial.accept(this)
    this.code.popObject(r.T1)  // Guardamos el valor a comparar en T1
    
    const endSwitchLabel = this.code.getLabel()
    const labels = new Map() // Para almacenar los labels de cada caso
    
    // Generar labels para cada caso
    node.casos.forEach(caso => {
        labels.set(caso, this.code.getLabel())
    })
    
    // Label para el default si existe
    const defaultLabel = node.c_default ? this.code.getLabel() : endSwitchLabel
    
    // Comparar con cada caso
    node.casos.forEach(caso => {
        this.code.comment(`Case ${caso.valor}`)
        this.code.li(r.T0, caso.valor)
        this.code.beq(r.T1, r.T0, labels.get(caso))
    })
    
    // Saltar al default si ningún caso coincide
    this.code.j(defaultLabel)
    
    // Generar código para cada caso
    node.casos.forEach((caso, index) => {
        this.code.addLabel(labels.get(caso))
        this.code.comment(`Sentencias case ${caso.exp}`)
        declaraciones.accept(this)
        
        
        // Si no hay break explícito, continuamos al siguiente caso
        if (!caso.tieneBreak) {
            const nextCase = node.casos[index + 1]
            if (nextCase) {
                this.code.j(labels.get(nextCase))
            } else if (node.casoDefault) {
                this.code.j(defaultLabel)
            }
        } else {
            this.code.j(endSwitchLabel)
        }
    })
    
    // Generar código para el default si existe
    if (node.c_default) {
        this.code.addLabel(defaultLabel)
        this.code.comment("Default case")
        node.casoDefault.accept(this)
    }
    
    this.code.addLabel(endSwitchLabel)
    this.code.comment("Fin del Switch")
}




//Switch
{
    name: 'Switch',
    extends: 'Expresion',
    props:[
        {
            name: 'inicial',
            type: 'Expresion',
            description: 'valor a comparar'
        },

        {
            name: 'casos',
            type: 'Case[]',
            description: 'Cases del switch'
        },

        {
            name: 'c_default',
            type: 'Default',
            description: 'Default del switch'
        }

    ]
},
//Case
{
    name: 'Case',
    extends: 'Expresion',
    props:[
        {
            name: 'exp',
            type: 'Expresion',
            description: 'Valor a comparar del caso'

        },
        {
            name: 'declaraciones',
            type: 'Expresion[]',
            description: 'Declaraciones y sentencias dentro del case'
        }
    ]
},
//Default
{
    name: 'Default',
    extends: 'Expresion',
    props:[
        {
            name: 'declaraciones_dflt',
            type: 'Expresion[]',
            description: 'Declaraciones y sentencias del default'
        }
    ]
}